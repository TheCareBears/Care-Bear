name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [14.x, 16.x]

    steps:
    - uses: actions/checkout@v2
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
    
    - name: Cache node modules
      uses: actions/cache@v2
      env:
        cache-name: cache-node-modules
      with:
        path: ~/.npm
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-
    
    - name: Install Dependencies
      run: npm ci
    
    - name: Test Dependency Installation
      run: npm run test-dependencies
    
    - name: Run Tests
      run: npm test
    
    - name: Build
      run: npm run build

      - name: Deploy to Production
        run: |
          # Aquí puedes agregar comandos para implementar tu aplicación en un servidor de producción
          # Esto dependerá de tu entorno de alojamiento y configuración específica

      - name: Notify on Failure
        if: failure()
        uses: actions/github-script@v5
        with:
          script: |
            const issue_body = `Build failed on ${context.ref}`;
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: "Build Failure",
              body: issue_body
            });
